---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: robo-fe
  namespace: '{{ .Values.appconfig.appnamespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: robo-fe
  template:
    metadata:
      labels:
        app: robo-fe
    spec:
      containers:
        - name: robo-fe
          image: ealtedge/robo-fe:v1.0
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: robo-fe
  namespace: '{{ .Values.appconfig.appnamespace }}'
spec:
  type: NodePort
  selector:
    app: robo-fe
  ports:
    - protocol: "TCP"
      port: 8080
      targetPort: 8080
      nodePort: 30997
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-proxy
  namespace: '{{ .Values.appconfig.appnamespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-proxy
  template:
    metadata:
      labels:
        app: node-proxy
    spec:
      containers:
        - name: node-proxy
          image: ealtedge/robo-node-proxy:v1.0
          ports:
            - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: node-proxy
  namespace: '{{ .Values.appconfig.appnamespace }}'
spec:
  type: NodePort
  selector:
    app: node-proxy
  ports:
    - protocol: "TCP"
      port: 5000
      targetPort: 5000
      nodePort: 30999

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backup-be
  namespace: '{{ .Values.appconfig.appnamespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backup
  template:
    metadata:
      labels:
        app: backup
    spec:
      volumes:
        - name: task-pv-storage
          persistentVolumeClaim:
            claimName: task-pv-claim
      containers:
        - name: backup-be
          image: ealtedge/robo-be
          env:
            - name: KUBE_CONFIG
              value: "/usr/app/.kube/config"
          ports:
            - containerPort: 8091
          volumeMounts:
            - name: task-pv-storage
              mountPath: "/usr/app/.kube/"
---
apiVersion: v1
kind: Service
metadata:
  name: backup-be
  namespace: '{{ .Values.appconfig.appnamespace }}'
spec:
  selector:
    app: backup
  type: NodePort
  ports:
    - port: 8091
      name: service-port
      nodePort: 30996
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: task-pv-volume
  namespace: '{{ .Values.appconfig.appnamespace }}'
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/root/.kube/"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: task-pv-claim
  namespace: '{{ .Values.appconfig.appnamespace }}'
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: smart-shelf
  namespace: '{{ .Values.appconfig.appnamespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: smart-shelf
  template:
    metadata:
      labels:
        app: smart-shelf
    spec:
      containers:
        - name: smart-shelf
          image: ealtedge/smartshelf:v1.0
          ports:
            - containerPort: 9995
---
apiVersion: v1
kind: Service
metadata:
  name: smart-shelf
  namespace: '{{ .Values.appconfig.appnamespace }}'
spec:
  selector:
    app: smart-shelf
  type: NodePort
  ports:
    - port: 9995
      name: service-port
      nodePort: 30995
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: obj-detection
  namespace: '{{ .Values.appconfig.appnamespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: obj-detection
  template:
    metadata:
      labels:
        app: obj-detection
    spec:
      containers:
        - name: obj-detection
          image: ealtedge/obj-detection:v1.0
          ports:
            - containerPort: 9998
          volumeMounts:
            - name: host-path-storage
              mountPath: "/usr/app/model/"
      volumes:
        - name: host-path-storage
          persistentVolumeClaim:
            claimName: host-path-claim
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: host-path-pv
  namespace: '{{ .Values.appconfig.appnamespace }}'
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/root/model/"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: host-path-claim
  namespace: '{{ .Values.appconfig.appnamespace }}'
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: obj-detection
  namespace: '{{ .Values.appconfig.appnamespace }}'
spec:
  selector:
    app: obj-detection
  type: NodePort
  ports:
    - port: 9998
      name: service-port
      nodePort: 30998
